?? core library

??<<
??? Alias for <a href="AtFunctions.html#String" target="_blank"><code>String</code></a>.
??? @type e (*)
??? @return string
??? @genre string
S := String
??>>

??<<
??? Returns a function with arguments <code>l</code> and <code>r</code> which
??? calls <code>f[e, r]</code> for each element <code>e</code> in <code>l</code>.
??? @type f fn
??? @return fn
??? @genre functional
MapLeft[f] := [l, r] -> { f&r => l }
??>>

??<<
??? Returns a function with arguments <code>l</code> and <code>r</code> which
??? calls <code>f[l, e]</code> for each element <code>e</code> in <code>r</code>.
??? @type f fn
??? @return fn
??? @genre functional
MapRight[f] := [l, r] -> { f&:l => r }
??>>

??<<
??? Returns the number of prime numbers less than or equal to <code>n</code>.
??? @type n number
??? @return number
??? @genre numeric/prime
??? @example Print[PrimePi[0:10]]
??? @example ?? [0, 0, 1, 2, 2, 3, 3, 4, 4, 4, 4]
PrimePi := @{#Series[Prime, _, include->true]}
??>>


??<<
??? Calls <code>Format[...args]</code>, which is passed then to <code>Print</code>.
??? @type args (*)...
??? @return [string]
??? @genre IO
Printf := Print@Format
??>>

??<<
??? Prints each element in <code>args</code>, separated by newlines, with no trailing newline. Returns <code>args</code>.
??? @type args (*)...
??? @return [(*)]
??? @genre IO
Output := Configure[Print, joiner->lf, after->es]@@Tie
??>>

??<<
??? Makes <code>ragged</code> a rectangular matrix, padding to the right with <code>padwith</code>.
??? @type ragged [[(*)]]
??? @type padwith (*)
??? @type padf fn
??? @optional padwith
??? @optional padf
??? @return [[(*)]]
??? @genre list/matrix
??? @example Display[PadMatrix[1:5:5]]
??? @example ??  1 2 3 4 5
??? @example ??  2 3 4 5 0
??? @example ??  3 4 5 0 0
??? @example ??  4 5 0 0 0
??? @example ??  5 0 0 0 0
??? @example Display[PadMatrix[1:5:5, 9, PadLeft]]
??? @example ??  1 2 3 4 5
??? @example ??  9 2 3 4 5
??? @example ??  9 9 3 4 5
??? @example ??  9 9 9 4 5
??? @example ??  9 9 9 9 5
PadMatrix[ragged, padwith, padf] := (
    padwith ..= 0;;
    padf ..= PadRight;;
    maxlen .= Max[Size => ragged];;
    padf<~_, maxlen, padwith~> => ragged
)
??>>

??<<
??? Returns an array of base <code>base</code> digits of the numbers found in
??? <code>Range[...args]</code>
??? @type base number
??? @type args number...
??? @return [[number]]
??? @genre numeric/bases
??? @example Print => BaseRange[2, 0, 10]
??? @example ?? [0, 0, 0, 1]
??? @example ?? [0, 0, 1, 0]
??? @example ?? [0, 0, 1, 1]
??? @example ?? [0, 1, 0, 0]
??? @example ?? [0, 1, 0, 1]
??? @example ?? [0, 1, 1, 0]
??? @example ?? [0, 1, 1, 1]
??? @example ?? [1, 0, 0, 0]
??? @example ?? [1, 0, 0, 1]
??? @example ?? [1, 0, 1, 0]
BaseRange := {
    base .= _1
    arr .= ToBase[Range[...__2], base]
    maxlen .= Max[Size => arr]
    PadLeft&maxlen => arr
}
??>>

??<<
??? Returns an array of base <code>base</code> digits less than
??? <code>base ^ n</code>.
??? @type base number
??? @type n number
??? @return [[number]]
??? @genre numeric/bases
BaseBelow[base, n] := BaseRange[base, base^n-1]
??>>

??<<
??? Returns an array of base <code>2</code> digits of the numbers found in
??? <code>Range[...args]</code>
??? @type args number...
??? @return [[number]]
??? @genre numeric/bases
BinRange := 2&BaseRange
??>>

??<<
??? Returns an array of base <code>8</code> digits of the numbers found in
??? <code>Range[...args]</code>
??? @type args number...
??? @return [[number]]
??? @genre numeric/bases
OctRange := 8&BaseRange
??>>

??<<
??? Returns an array of base <code>16</code> digits of the numbers found in
??? <code>Range[...args]</code>
??? @type args number...
??? @return [[number]]
??? @genre numeric/bases
HexRange := 16&BaseRange
??>>

??<<
??? Returns an array of base <code>2</code> digits less than
??? <code>2 ^ n</code>.
??? @type n number
??? @return [[number]]
??? @genre numeric/bases
BinBelow := 2&BaseBelow
??>>
??<<
??? Returns an array of base <code>8</code> digits less than
??? <code>8 ^ n</code>.
??? @type n number
??? @return [[number]]
??? @genre numeric/bases
OctBelow := 8&BaseBelow
??>>
??<<
??? Returns an array of base <code>16</code> digits less than
??? <code>16 ^ n</code>.
??? @type n number
??? @return [[number]]
??? @genre numeric/bases
HexBelow := 16&BaseBelow
??>>

??<<
??? Splits <code>x</code> into <code>n</code> groups.
??? @type x [(*)]
??? @type n number
??? @return [[(*)]]
??? @genre list
??? @example Print[ChopInto[1:6, 3]]
??? @example ?? [[1, 2], [3, 4], [5, 6]]
ChopInto[x, n] := Chop[x, Ceiling[#x / n]]
??>>

??<<
??? Returns the distance between points <code>p1</code> and <code>p2</code> on the
??? Euclidean plane.
??? @type p1 [(*)]
??? @type p2 [(*)]
??? @return number
??? @genre number
??? @example Print[Distance[ [1, 2], [1, 4] ]]
??? @example ?? 2.0
??? @example Print[Distance[ Point[0, 0], Point[5, 12] ]]
??? @example ?? 13.0
??? @example Print[Distance[ -3-4i, 3+4i ]]
??? @example ?? 10.0
??? @example Print[Distance[ [0, 0], [1, 1] ]]
??? @example ?? 1.4142135623730951
Distance[p1, p2] := Norm[p1 - p2]
??>>

??<<
??? Point class.
??? @genre numeric
??? @return Point
??? @type x number
??? @type y number
??? @example origin := Point[0, 0]
??? @example Print[origin]
??? @example ?? (0, 0)
??? @example pythag := Point[3, 4]
??? @example Print[pythag]
??? @example ?? (3, 4)
ClassNamed[Point]! {
    x .= _1
    y .= _2

    $map[f, vec] .= New[Point, f[x], f[y]]

    $string[] .= Format["(%s, %s)", x, y]
}
??>>

??<<
??? Returns a function which applies <code>f</code> to the grid of charcters in a string. This returns a string.
??? @type f fn
??? @return fn
??? @genre functional/string
OverGrid[f] := UnGrid@f@Grid
??>>

??<<
??? Returns a function which applies <code>f</code> to the charcters in a string. This returns a string.
??? @type f fn
??? @return fn
??? @genre functional/string
OverChars[f] := Join@f@Chars
??>>

??<<
??? Returns the minimum and the maximum of <code>list</code> in a 2-element array.
??? @type list [(*)]
??? @return [(*), (*)]
??? @genre list
??? @example list := [1, 9, 3, -5, 0, 0, 12]
??? @example Print[MinMax[list]]
??? @example ?? [-5, 12]
MinMax := Min # V # Max
??>>

??<<
??? Returns all positive integers which divide <code>n</code> which are also
??? less than or equal to <code>Sqrt[n]</code>.
??? @type n number
??? @return [number]
??? @genre numeric
RawDivisors[n] :=
    `|&_ \ 1:Sqrt[n]
??>>

??<<
??? Returns all positive integers which divide <code>n</code>.
??? @type n number
??? @return [number]
??? @genre numeric
Divisors := @{
    d .= RawDivisors[_]
    Union[d, Reverse[_ / d]]
}
??>>

??<<
??? Returns all but the last element of <code>list</code>.
??? @type list [(*)]
??? @return [(*)]
??? @genre list
Betail[list] := list[0...#list - 1]
??>>

??<<
??? Returns all but the first element of <code>list</code>.
??? @type list [(*)]
??? @return [(*)]
??? @genre list
Behead[list] := list[1...#list]
??>>

??<<
??? Returns all divisors of <code>n</code>, except <code>n</code>.
??? @type n number
??? @return [number]
??? @genre numeric
ProperDivisors := @(Betail@Divisors)
??>>

?? TODO: rainbow

??<<
??? Synonym for <code>GenerateFirst[N, ...args]</code>.
??? @return (*)
??? @type args (*)...
??? @type fn cond
??? @genre functional
Generate := GenerateFirst&:N
??>>

??<<
??? <code>Print</code>, but without a trailing newline.
??? @type args (*)...
??? @return [(*)]
??? @genre IO
Echo := Configure[Print, after->es]
??>>

?? TODO: rings
?? Rings[mat, n] := 32

?? you know, I have no idea what this is
MaskMatrix[fs, mask, list] := (
    If[Concat[fs] =/= fs, fs .= [Id, fs]];;
    ZipWith<~Call, _, list~> => fs[mask]
)

??<<
??? Returns the real and imaginary portions of <code>n</code>.
??? @return [number]
??? @type n (*)
??? @genre numeric
ReIm := Re#V#Im
??>>

??<<
??? Returns <code>x</code> if it is a function, otherwise returns a constant function
??? returning <code>x</code>.
??? @type x (*)
??? @type bonder fn
??? @optional bonder
??? @param bonder If specified, returns a function with <code>x</code> as its left argument instead of a constant function.
??? @return fn
??? @genre functional
MakeFunction[x, bonder] := (
    bonder ..= {_};;
    If[typeof x is $function, x, x&bonder]
)
??>>

??<<
??? Replaces all cells in <code>list</code> matching <code>cond</code> with <code>with</code>.
??? @curries
??? @type cond (*)
??? @type with (*)
??? @type list [(*)]
??? @return [(*)]
??? @genre list
??? @example mat1 := Identity[4]
??? @example Display[CellReplace[0, 9, mat1]]
??? @example ??  1 9 9 9
??? @example ??  9 1 9 9
??? @example ??  9 9 1 9
??? @example ??  9 9 9 1
??? @example mat2 := Integers[3, 3]
??? @example Display[CellReplace[Odd, Square, mat2]]
??? @example ??  0  1  2
??? @example ??  9  4 25
??? @example ??  6 49  8
??? @example Print[CellReplace[Positive, `-, -4:4]]
??? @example ?? [-4, -3, -2, -1, 0, -1, -2, -3, -4]
CellReplace := Curry[[cond, with, list] -> {
    cond .= MakeFunction[cond, `==]
    with .= MakeFunction[with]
    ${
        If[cond[x],
            with[x],
            x
        ]
    } @> list
}]
??>>

??<<
??? Returns the norm of <code>x</code>.
??? @type x [(*)]
??? @return number
??? @genre list
??? @example Print[Norm[3'4]]
??? @example ?? 5.0
??? @example Print[Norm[-2+1i]]
??? @example ?? 2.23606797749979
Norm[x] := (
    list .= Flat[CellReplace[IsImaginary, ReIm, x]];;
    Sqrt[Sum[list^2]]
)
??>>

??<<
??? Returns all overlapping slices of size <code>2</code> in <code>list</code>.
??? @type list [(*)]
??? @return [(*)]
??? @genre list
??? @example Print[Pairs[1:5]]
??? @example ?? [[1, 2], [2, 3], [3, 4], [4, 5]]
Pairs := Slices&2
??>>

??<<
??? Returns all overlapping slices of size <code>3</code> in <code>list</code>.
??? @type list [(*)]
??? @return [(*)]
??? @genre list
??? @example Print[Triples[1:5]]
??? @example ?? [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
Triples := Slices&3
??>>

??<<
??? Returns the leftmost argument given.
??? @type args (*)...
??? @return (*)
??? @genre functional
??? @example Print[Left[1, 2, 3, 4]]
??? @example ?? 1
Left := First@V
??>>

??<<
??? Returns the rightmost argument given.
??? @type args (*)...
??? @return (*)
??? @genre functional
??? @example Print[Right[1, 2, 3, 4]]
??? @example ?? 4
Right := Last@V
??>>

IsArray[x] := typeof x is $array

??<<
??? Returns the dimensionality of <code>x</code>.
??? @type x [(*)]
??? @return number
??? @genre list
??? @example Print[Order[10]]
??? @example ?? 0
??? @example Print[Order["Hello! :D"]]
??? @example ?? 0
??? @example Print[Order[1:5]]
??? @example ?? 1
??? @example Print[Order[Identity[3]]]
??? @example ?? 2
??? @example Print[Order[ [[[[[9]]]]] ]]
??? @example ?? 2 (broken, since Dim is currently broken)
Order := Agenda[[{0}, Size@Dim], IsArray]
??>>

DivisorPairs := @(Tr@Fork[Right, V, `/]#RawDivisors)

Clip := CellReplace[{_ /= 0}, 1]

MultiJoin[list] := (
    order .= Order[list];;
    If[Any[IsArray, list] and order = 1, order .= 2];;
    Cases[
        order = 0  ->  String[list],
        order = 1  ->  Join[list],
        order = 2  ->  UnGrid[list],
        $else      ->  MultiJoin => list
    ]
)

PascalTriangle[n, seed] := (
    seed ..= [1];;
    NestList[{ 1'(Sum=>Pairs[_])'1 }, seed, n]
)

Letters := Select[IsAlpha]
LettersOf := Unique@Letters
Numbers := Select[IsNumeric]
NumbersOf := Unique@Numbers

FULL_LEGEND := "-.`_':=,""^;~cz><rs+?T/J\\i*!7FIltv1efuZn|35S{)L[aoCEYjx}(26Pyhkpq4bdwAG9KV8R]OUXB#Hg$&0D%MWQmN@"
UTF8_LEGEND := "░▒▓"

??<<
??? Returns a string of characters which represent the "weight" of certain elements.
??? @type mat [[number]]
??? @type legend [(*)]
??? @type min number
??? @type max number
??? @optional legend
??? @optional min
??? @optional max
??? @return string
??? @genre string
??? @example Print[HeatMap[1:5]]
??? @example ?? -\[G@
??? @example Print[HeatMap[1:5:5]]
??? @example ?? -\[G@
??? @example ?? \[G@
??? @example ?? [G@
??? @example ?? G@
??? @example ?? @
??? @example Print[HeatMap[1:5:5, UTF8_LEGEND]]
??? @example ?? ░░▒▒▓
??? @example ?? ░▒▒▓
??? @example ?? ▒▒▓
??? @example ?? ▒▓
??? @example ?? ▓
??? @example Print[HeatMap[1:5:5, "01"]]
??? @example ?? 00001
??? @example ?? 0001
??? @example ?? 001
??? @example ?? 01
??? @example ?? 1
??? @example Print[HeatMap[PascalTriangle[10]]]
??? @example ?? -
??? @example ?? --
??? @example ?? ---
??? @example ?? ----
??? @example ?? -...-
??? @example ?? -.__.-
??? @example ?? -.:,:.-
??? @example ?? -`,cc,`-
??? @example ?? -`;T*T;`-
??? @example ?? -`cl[[lc`-
??? @example ?? -_r)U@U)r_-
??? @example Print[HeatMap[PascalTriangle[7] % 2, " ."]]
??? @example ?? .
??? @example ?? ..
??? @example ?? . .
??? @example ?? ....
??? @example ?? .   .
??? @example ?? ..  ..
??? @example ?? . . . .
??? @example ?? ........
HeatMap[mat, legend, min, max] := (
    min ..= Min[mat];;
    max ..= Max[mat];;
    legend ..= FULL_LEGEND;;
    diffs .= If[max = min,
        mat * 0,
        (mat - min) / (max - min)
    ];;
    MultiJoin <| legend[diffs * (#legend - 1) | Floor]
)
??>>

ClassNamed[MatrixShapeGenerator]! {
    motions .= <~
        "v" -> {
            While[row < height, _[row, col] ;; row .= row + 1]
        },
        ">" -> {
            While[col < width, _[row, col] ;; col .= col + 1]
        },
        "\\" -> {
            While[col < width and row < height, _[row, col] ;; row .= row + 1 ;; col .= col + 1]
        },
        "/" -> {
            While[col >= 0 and row < height, _[row, col] ;; row .= row + 1 ;; col .= col - 1]
        },
        "^" -> {
            While[row >= 0, _[row, col] ;; row .= row - 1]
        },
        "<" -> {
            While[col >= 0, _[row, col] ;; col .= col - 1]
        },
        "u" -> {
            row .= row - 1
            wrap_bounds[]
            _[row, col]
        },
        "d" -> {
            row .= row + 1
            wrap_bounds[]
            _[row, col]
        },
        "l" -> {
            col .= col - 1
            wrap_bounds[]
            _[row, col]
        },
        "r" -> {
            col .= col + 1
            wrap_bounds[]
            _[row, col]
        },
        "@" -> {
            _[row, col]
        },
        "$" -> {
            default_action .= _
        }
    ~>
    keys .= Join[EscapeRegex => Keys[motions]]
    code .= MatchAll[_1, "[" + keys + "][^\\`" + keys + "]|."]
    ClearLocal[keys]

    height .= _2
    width  .= _3
    width ..= height
    matrix .= [height, width]&0
    row .= 0
    col .= 0
    ip .= 0
    actions .= <~
        "." -> ([row, col] -> { mark[row, col, 1] }),
        "!" -> ([row, col] -> { mark[row, col, 1 - matrix[row][col]] }),
        "R" -> ([row, col] -> { mark[row, col, matrix[row][col] + row] }),
        "C" -> ([row, col] -> { mark[row, col, matrix[row][col] + col] }),
        "B" -> ([row, col] -> { mark[row, col, matrix[row][col] + row + col] }),
        ":" -> ({ step }),
        ?? I have no idea why, but you have to have a reference to a method here.
        "`" -> '{
            row .= 0
            col .= 0
        },
        ";" -> '{
            row .= height - 1
            col .= width - 1
        }
    ~>
    "0":"9" :> {
        n .= N! _
        Set[actions, _, { mark[_, _2, matrix[_][_2] + n] }]
    }
    ??Print => actions
    default_action .= actions["."]

    wrap_bounds .= {
        row .= row % height
        col .= col % width
    }

    mark[row, col, n] .= SetMatrix[matrix, row, col, n]

    step .= {
        cur .= code[ip]
        If[cur@0 in motions,
            mot .= motions[cur@0];;
            act .= actions[cur@1];;
            mot[act or default_action],

            act .= actions[cur];;
            act[row, col]
        ]
        ip .= ip + 1
    }

    run .= {
        While[ip < #code, step[]]
        matrix
    }
}

EulerPhi := @${ Sum[GCD&x => 1:x = 1] }

NTS_dict_after := Join[0:9] + alpha + ALPHA
NTS_dict_head  := alpha + ALPHA
NTS := @${
    dm .= Reverse! DivMod[x, #NTS_dict_head]
    el .= Pop[dm]
    If[el, Push[dm, ...ToBase[el, #NTS_dict_after]]]
    Join[NTS_dict_head[dm@0] ' NTS_dict_after[Behead! dm]]
}
STN := @${
    md .= SplitAt[x]
    sum .= Index[NTS_dict_head, md@0]
    If[md@1,
        sum .= sum + 52 * FromBase[Index[NTS_dict_after, Chars! md@1], #NTS_dict_after]
    ]
    sum
}

?? Generates a matrix of 1's and 0's
DrawMatrix := Curry[[s, n] -> {
    m .= _3
    m ..= n
    inst .= MatrixShapeGenerator[s, n, m]
    inst.run[]
}]

AlignRight[str, n] := (
    lines .= If[IsArray[str], Lines! UnGrid! str, Lines[str]];;
    n ..= Max[Size => lines];;
    res .= PadLeft&n => lines;;
    Join[res, lf]
)

??<<
??? Returns a function which calls <code>f</code> with no arguments.
??? @type f fn
??? @return fn
??? @genre functional
??? @example print3 := Nilad[Print&3]
??? @example print3[]
??? @example ?? 3
??? @example print3["Hello!"]
??? @example ?? 3
Nilad[f] := { _[] }&:f
??>>

??<<
??? Calls <code>f</code> once with no arguments.
??? @type f fn
??? @return (*)
??? @genre functional
??? @example Once[Print<~3, 4~>]
??? @example ?? 3 4
??? @example Print[Once[V]]
??? @example ?? []
Once[f] := f[]
??>>

??<<
??? Calls <code>f</code> twice with no arguments, collecting results into an array.
??? @type f fn
??? @return [(*)]
??? @genre functional
??? @example Print[Twice[Prompt<~"> "~>]]
??? @example ?? > hello
??? @example ?? > world
??? @example ?? ["hello", "world"]
Twice[f] := [f[], f[]]
??>>

??<<
??? Calls <code>f</code> three times with no arguments, collecting results into an array.
??? @type f fn
??? @return [(*)]
??? @genre functional
??? @example Print["Answer:", Sum <| Thrice[ReadInt]]
??? @example ?? 12
??? @example ?? 3
??? @example ?? -4
??? @example ?? Answer: 11
Thrice[f] := [f[], f[], f[]]
??>>

??<<
??? Calls <code>f</code> <code>n</code> times with no arguments, collectin the results into an array.
??? @type f fn
??? @return [(*)]
??? @genre functional
Do[f, n] :=
    If[n == nil,
        f[],
        If[n > 0,
            f[] ' Do[f, n - 1],
            []
        ]
    ]
??>>

??<<
??? Reads a line of STDIN and converts each entry to a number, space-separated.
??? @return [number]
??? @genre IO
ReadNumbers[] :=
    ReadLine[] | Split | N
??>>

ClassNamed[Displayment]! {
    value .= _1

    repr[] .= $"Displayment[${value}]"

    $string[] .= repr[]
}

base_alpha := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
ToBaseString := Join@{ base_alpha[_] }@ToBase
FromBaseString[x, b] :=
    FromBase[
        Index[base_alpha, Chars! Upcase! x],
        b
    ]

HexString   := ToBaseString&16
UnHexString := FromBaseString&16
BinString   := ToBaseString&2
UnBinString := FromBaseString&2
OctString   := ToBaseString&8
UnOctString := FromBaseString&8

?? expected value
E[dist] :=
    Sum[`* &> dist]

HashFrom := Hash@Stitch