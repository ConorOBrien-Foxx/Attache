?? FRACTRAN
?? https://en.wikipedia.org/wiki/FRACTRAN

?? code is a list of fractions
?? E.g.:
?? FRACTRAN[ [ 17//91, 78//85, 19//51, 23//38, 29//33, 77//29, 95//23, 77//19, 1//17, 11//13, 13//11, 15//14, 15//2, 55//1 ], 2]
FRACTRAN := [code, n, iter] -> {
    iter ..= inf
    result .= NestListWhile[{
        Find[Integral, _ * code]
    }, n, InvocationIndex[{
        _ /= nil and _2 < iter
    }]]
    N => RemoveAll[result, nil]
}

FractranExample := Class! {
    code .= _1
    encode .= _2
    decode .= _3

    run[input, n] .= FRACTRAN[$.code, $.encode[input], n] |> $.decode
    $call .= run@V
}

DecodeLast[n] := N@Round&10@LogBase&n@Last
PrimePower := { Prod@__&`^}

FRACTRAN_EXAMPLES := <~
    prime -> New[
        FractranExample,
        [17//91, 78//85, 19//51, 23//38, 29//33, 77//29, 95//23, 77//19, 1//17, 11//13, 13//11, 15//14, 15//2, 55//1],
        Id, Id
    ],
    add -> New[
        FractranExample,
        [3//2],
        PrimePower[2, 3],
        DecodeLast[3]
    ],
    multiply -> New[
        FractranExample,
        [455//33, 11//13, 1//11, 3//7, 11//2, 1//3],
        PrimePower[2, 3],
        DecodeLast[5]
    ],
    divmod -> New[
        FractranExample,
        [91//66, 11//13, 1//33, 85//11, 57//119, 17//19, 11//17, 1//3],
        PrimePower[2, 3] # `* # C[11],
        Last => PrimeDivision ## Last
    ]
~>

?? D2
?? A language of my own creation

ClassNamed[D2State]! {
    grid .= Grid[_1]
    debug_state .= _2
    ip .= Point[0, 0]
    dip .= Point[1, 0]
    stack .= []
    mode .= 0
    running .= true

    exec[cell] .= (
        cmd .= $.cmds[cell];;
        If[IsNumeric[cell],
            Push[$.stack, N[cell]],
            If[cmd, cmd[$]]
        ]
    )

    cmds .= <~
        ">" -> { _.dip .= Point[1, 0] },
        "<" -> { _.dip .= Point[-1, 0] },
        "^" -> { _.dip .= Point[0, -1] },
        "v" -> { _.dip .= Point[0, 1] },
        "p" -> { Print! _.pop[] },
        "P" -> { Print! _.last[] },
        "o" -> { Print[Char! _.pop[], after->es] },
        "O" -> { Print[Char! _.last[], after->es] },
        "s" -> { Push[_.stack, #_.stack] },
        "[" -> { Push[_.stack, 1]; _.exec["-"] },
        "]" -> { Push[_.stack, 1]; _.exec["+"] },
        ";" -> { _.running .= false },
        ":" -> { Push[_.stack, _.last[]] },
        "." -> { _.pop[] },
        "i" -> {
            res .= -1
            DoSafe[res .= ReadInt[]]
            Push[_.stack, res]
        },
        "j" -> {
            Push[_.stack, ReadChar[]]
        },
        "|" -> {
            If[_.last[], "^", "v"] |> _.exec
        },
        "V" -> {
            If[_.pop[], "^", "v"] |> _.exec
        },
        "_" -> {
            If[_.last[], "<", ">"] |> _.exec
        },
        "L" -> {
            If[_.pop[], "<", ">"] |> _.exec
        },
        "?" -> {
            If[_.last[], _.exec["v"]]
        },
        "C" -> {
            If[_.pop[], _.exec["v"]]
        },
        "#" -> {
            _.advance[]
        },
        "@" -> {
            Print[_.stack]
        },
        "+" -> {
            Push[_.stack, &~`+ <| CallN[_.pop, 2]]
        },
        "-" -> {
            Push[_.stack, &~`- <| CallN[_.pop, 2]]
        },
        "*" -> {
            Push[_.stack, &~`* <| CallN[_.pop, 2]]
        },
        "/" -> {
            Push[_.stack, &~`/ <| CallN[_.pop, 2]]
        },
        "(" -> {
            Push[_.stack, N <| &~`< <| CallN[_.pop, 2]]
        },
        ")" -> {
            Push[_.stack, N <| &~`> <| CallN[_.pop, 2]]
        },
        "=" -> {
            Push[_.stack, N <| &~`= <| CallN[_.pop, 2]]
        },
        "~" -> {
            Push[_.stack, ...CallN[_.pop, 2]]
        },
        "r" -> {
            _.stack .= Reverse[_.stack]
        },
        "$" -> {
            _.advance[]
            next .= _.grid[_.ip.y][_.ip.x]
            amount .= _.pop[]
            ex .= _.exec
            ForEach[1:amount, ex[next]]
        },
        "'" -> {
            _.advance[]
            Push[_.stack, _.grid[_.ip.y][_.ip.x] |> Ord]
        },
        """" -> {
            _.mode .= 1
        },
        "`" -> {
            amount .= _.pop[]
            str .= Char[Reverse[CallN[_.pop, amount]]]
            If[IsAlphaNumeric[str],
                fn .= Eval[str];;
                args .= Reverse! CallN[_.pop, #fn];;
                Push[_.stack, Apply[fn, args]]
            ]
        },
        "!" -> {
            arity .= _.pop[]
            amount .= _.pop[]
            str .= Char[Reverse[CallN[_.pop, amount]]]
            If[IsAlphaNumeric[str],
                fn .= Eval[str];;
                args .= Reverse! CallN[_.pop, arity];;
                Push[_.stack, Apply[fn, args]]
            ]
        }
    ~>

    advance .= {
        $.ip .= $.ip + $.dip
        $.ip .= $.ip % Reverse[##$.grid]
    }

    pop .= {
        If[#$.stack, Pop[$.stack], 0]
    }

    last .= {
        res .= $.pop[]
        Push[$.stack, res]
        res
    }

    step .= {
        cell .= $.grid[$.ip.y][$.ip.x]
        ?? Print["EXECUTING:", cell]
        If[$.mode = 0,
            $.exec[cell],

            If[cell = """",
                $.mode .= 0,
                Push[$.stack, Ord[cell]]
            ]
        ]
        $.advance[]
    }

    run .= {
        While[$.running,
            If[$.debug_state, $.debug[]];;
            $.step[]
        ]
    }

    debug_ .= ($string .= {
        left_axis .= (#$.grid + 1)&sp
        left_axis[ip.y] @= ">"
        bot_axis .= (#$.grid[0])&sp
        bot_axis[ip.x] @= "^"
        fmt .= Join[Stitch[left_axis, Join => $.grid], lf] + Join[bot_axis]
        Format[
            "ip: %s\ndip: %s\n[[GRID]]\n%s\n[[/GRID]]\n[[STACK]]\n%s\n[[/STACK]]",
            $.ip,
            $.dip,
            fmt,
            $.stack
        ]
    })

    debug .= {
        Cls[]
        Print[$.debug_[] + lf]
        Prompt["Press ENTER."]
    }
}

D2[code, debug] := (
    debug ..= false;;
    inst .= D2State[code, debug];;
    inst.run[];;
    inst.stack
)

??

deadfish[code, acc] .= (
    acc ..= 0;;
    ForEach[code,
        If[_ = "i", acc .= acc + 1];;
        If[_ = "d", acc .= acc - 1];;
        If[_ = "s", acc .= acc ^ 2];;
        If[_ = "o", Print[acc]];;

        If[acc = -1 or acc = 256, acc .= 0]
    ];;
    acc
)
