?? FRACTRAN
?? https://en.wikipedia.org/wiki/FRACTRAN

?? code is a list of fractions
?? E.g.:
?? FRACTRAN[ [ 17//91, 78//85, 19//51, 23//38, 29//33, 77//29, 95//23, 77//19, 1//17, 11//13, 13//11, 15//14, 15//2, 55//1 ], 2]
FRACTRAN := [code, n, iter] -> {
    iter ..= inf
    result .= NestListWhile[{
        Find[Integral, _ * code]
    }, n, InvocationIndex[{
        _ /= nil and _2 < iter
    }]]
    N => RemoveAll[result, nil]
}

FractranExample := Class! {
    code .= _1
    encode .= _2
    decode .= _3

    run[input, n] .= FRACTRAN[code, encode[input], n] |> decode
    $call .= run@V
}

DecodeLast[n] := N@Round&10@LogBase&n@Last
PrimePower := { Prod@__&`^}

FRACTRAN_EXAMPLES := <~
    prime -> New[
        FractranExample,
        [17//91, 78//85, 19//51, 23//38, 29//33, 77//29, 95//23, 77//19, 1//17, 11//13, 13//11, 15//14, 15//2, 55//1],
        Id, Id
    ],
    add -> New[
        FractranExample,
        [3//2],
        PrimePower[2, 3],
        DecodeLast[3]
    ],
    multiply -> New[
        FractranExample,
        [455//33, 11//13, 1//11, 3//7, 11//2, 1//3],
        PrimePower[2, 3],
        DecodeLast[5]
    ],
    divmod -> New[
        FractranExample,
        [91//66, 11//13, 1//33, 85//11, 57//119, 17//19, 11//17, 1//3],
        PrimePower[2, 3] # `* # C[11],
        Last => PrimeDivision ## Last
    ]
~>

?? D2
?? A language of my own creation

ClassNamed[D2State]! {
    grid .= Grid[_1]
    ip .= Point[0, 0]
    dip .= Point[1, 0]
    stack .= []
    mode .= 0
    string .= ""
    running .= true
    
    exec[cell] .= (
        cmd .= cmds[cell];;
        If[IsNumeric[cell],
            Push[stack, N[cell]],
            If[cmd, ('cmd)[]]
        ]
    )
    
    cmds .= <~
        ">" -> { dip .= Point[1, 0] },
        "<" -> { dip .= Point[-1, 0] },
        "^" -> { dip .= Point[0, -1] },
        "v" -> { dip .= Point[0, 1] },
        "p" -> { Print! pop[] },
        "P" -> { Print! last[] },
        "o" -> { Print[Char! pop[], after->es] },
        "O" -> { Print[Char! last[], after->es] },
        "s" -> { Push[stack, #stack] },
        "[" -> { Push[stack, 1]; exec["-"] },
        "]" -> { Push[stack, 1]; exec["+"] },
        ";" -> { running .= false },
        ":" -> { Push[stack, last[]] },
        "." -> { pop[] },
        "i" -> {
            res .= -1
            DoSafe[res .= ReadInt[]]
            Push[stack, res]
        },
        "j" -> {
            Push[stack, ReadChar[]]
        },
        "|" -> {
            If[last[], "^", "v"] |> exec
        },
        "V" -> {
            If[pop[], "^", "v"] |> exec
        },
        "_" -> {
            If[last[], "<", ">"] |> exec
        },
        "L" -> {
            If[pop[], "<", ">"] |> exec
        },
        "?" -> {
            If[last[], exec["v"]]
        },
        "C" -> {
            If[pop[], exec["v"]]
        },
        "#" -> {
            advance[]
        },
        "@" -> {
            Print[stack]
        },
        "+" -> {
            Push[stack, &~`+ <| CallN[pop, 2]]
        },
        "-" -> {
            Push[stack, &~`- <| CallN[pop, 2]]
        },
        "*" -> {
            Push[stack, &~`* <| CallN[pop, 2]]
        },
        "/" -> {
            Push[stack, &~`/ <| CallN[pop, 2]]
        },
        "(" -> {
            Push[stack, N <| &~`< <| CallN[pop, 2]]
        },
        ")" -> {
            Push[stack, N <| &~`> <| CallN[pop, 2]]
        },
        "=" -> {
            Push[stack, N <| &~`= <| CallN[pop, 2]]
        },
        "~" -> {
            Push[stack, ...CallN[pop, 2]]
        },
        "r" -> {
            stack .= Reverse[stack]
        },
        "$" -> {
            advance[]
            next .= grid[ip.y][ip.x]
            amount .= pop[]
            CallN[{exec[next]}, amount]
        },
        "'" -> {
            advance[]
            Push[stack, grid[ip.y][ip.x] |> Ord]
        },
        """" -> {
            mode .= 1
        }
    ~>
    
    advance .= {
        ip .= ip + dip
        ip .= ip % Reverse[##grid]
    }
    
    pop .= {
        If[#stack, Pop[stack], 0]
    }
    
    last .= {
        res .= pop[]
        Push[stack, res]
        res
    }
    
    step .= {
        cell .= grid[ip.y][ip.x]
        If[mode = 0,
            exec[cell],
            
            If[cell = """",
                mode .= 0,
                Push[stack, Ord[cell]]
            ]
        ]
        advance[]
    }

    run .= {
        While[running, step[]]
    }

    $string .= {
        Format["ip: %s\ndip: %s\n[[GRID]]\n%s\n[[/GRID]]", ip, dip, UnGrid[grid]]
    }
}

D2[code] := (
    inst .= D2State[code];;
    inst.run[];;
    inst.stack
)

??
